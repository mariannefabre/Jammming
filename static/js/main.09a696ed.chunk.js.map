{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/Tracklist/Tracklist.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["userAccessToken","SearchBar","props","state","searchTerm","search","bind","handleTermChange","e","this","setState","target","value","onSearch","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","Tracklist","trackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","title","playlistTracks","onSave","Spotify","getAccessToken","console","log","finalUrl","window","location","href","tokenRegex","expirationRegex","match","expirationTime","setTimeout","history","pushState","scope","redirectUrl","url","encodeURIComponent","urlToFetch","fetch","headers","Authorization","response","ok","json","jsonResponse","items","artists","uri","Error","savePlaylist","playlistName","trackURIs","user_id","createPlaylistUrl","method","body","JSON","stringify","createPlaylistResponse","playlistID","addItemsUrl","App","updatePlaylistName","filter","element","length","updatedPlaylistTracks","push","index","indexOf","splice","forEach","term","results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAGIA,E,0GCASC,G,YAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAY,IAEd,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBANP,EADrB,6DAUmBE,GAEfC,KAAKC,SAAS,CACZN,WAAYI,EAAEG,OAAOC,UAb3B,+BAkBOH,KAAKN,MAAMC,YACZK,KAAKP,MAAMW,SAASJ,KAAKN,MAAMC,cAnBrC,+BAwBI,OACE,sBAAKU,UAAU,YAAf,UACE,uBACEF,MAAOH,KAAKN,MAAMC,WAClBW,YAAY,gCACZC,SAAUP,KAAKF,mBAEjB,wBAAQO,UAAU,eAAeG,QAASR,KAAKJ,OAA/C,2BA/BR,GAA+Ba,IAAMC,YCAxBC,G,YAAb,kDACE,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBAHF,EADrB,uDAOIG,KAAKP,MAAMqB,MAAMd,KAAKP,MAAMsB,SAPhC,oCAUIf,KAAKP,MAAMuB,SAAShB,KAAKP,MAAMsB,SAVnC,qCAaI,MAA6B,SAAzBf,KAAKP,MAAMwB,UAEX,wBAAQZ,UAAU,eAAeG,QAASR,KAAKa,YAA/C,eAMA,wBAAQR,UAAU,eAAeG,QAASR,KAAKY,SAA/C,iBArBR,+BA6BI,OACE,sBAAKP,UAAU,QAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,6BAAKL,KAAKP,MAAMsB,MAAMG,OACtB,8BACGlB,KAAKP,MAAMsB,MAAMI,OADpB,MAC+BnB,KAAKP,MAAMsB,MAAMK,YAGjDpB,KAAKqB,sBArCd,GAA2BZ,IAAMC,YCCpBY,G,MAAb,uKACY,IAAD,OACDC,EAAYvB,KAAKP,MAAM+B,OAAOC,KAAI,SAACV,GACvC,OACE,cAAC,EAAD,CAEEA,MAAOA,EACPD,MAAO,EAAKrB,MAAMqB,MAClBG,UAAW,EAAKxB,MAAMwB,UACtBD,SAAU,EAAKvB,MAAMuB,UAJhBD,EAAMW,OASjB,OAAO,qBAAKrB,UAAU,YAAf,SAA4BkB,QAdvC,GAA+Bd,IAAMC,YCAxBiB,EAAb,kDACE,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,EADrB,qDAMI,OACE,sBAAKW,UAAU,gBAAf,UACE,yCACA,cAAC,EAAD,CACEmB,OAAQxB,KAAKP,MAAMmC,cACnBX,UAAU,QACVH,MAAOd,KAAKP,MAAMqB,eAZ5B,GAAmCL,IAAMC,WCA5BmB,G,MAAb,kDACE,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IAEDqC,iBAAmB,EAAKA,iBAAiBjC,KAAtB,gBAHP,EADrB,6DAMmBE,GACfC,KAAKP,MAAMsC,aAAahC,EAAEG,OAAOC,SAPrC,+BAUI,OACE,sBAAKE,UAAU,WAAf,UACE,uBACEC,YAAY,oBACZC,SAAUP,KAAK8B,iBACf3B,MAAOH,KAAKP,MAAMuC,QAEpB,cAAC,EAAD,CACER,OAAQxB,KAAKP,MAAMwC,eACnBhB,UAAU,OACVD,SAAUhB,KAAKP,MAAMuB,WAEvB,wBAAQX,UAAU,gBAAgBG,QAASR,KAAKP,MAAMyC,OAAtD,oCAtBR,GAA8BzB,IAAMC,YLCvByB,EAAU,CACrBC,eADqB,WAEnB,GAAI7C,EAEF,OADA8C,QAAQC,IAAI,QACL/C,EAEP,IAAMgD,EAAWC,OAAOC,SAASC,KAC3BC,EAAa,uBACbC,EAAkB,qBACxB,GACqC,MAAnCL,EAASM,MAAMD,IACe,MAA9BL,EAASM,MAAMF,GACf,CACA,IAAIG,EAAiBP,EAASM,MAAMD,GAAiB,GACrDrD,EAAkBgD,EAASM,MAAMF,GAAY,GAC7CH,OAAOO,YAAW,WAChBxD,EAAkB,KACA,IAAjBuD,GACHN,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KAC/CZ,QAAQC,IAAI,aACP,GAAmC,OAA/BC,EAASM,MAAMF,GAAsB,CAC9C,IAEMO,EAAQ,yBACRC,EACJC,2FAGqBC,mBAAmBH,GAHxCE,wFAQFZ,OAAOC,SAASC,KAAOS,EACvBd,QAAQC,IAAI,UAKZ1C,OAvCe,SAuCRD,GAAa,IAAD,qIACvB,EAAKyC,iBACCkB,EACJ,kDAAoD3D,EAH/B,kBAKE4D,MAAMD,EAAY,CACvCE,QAAS,CACPC,cAAc,UAAD,OAAYlE,MAPR,YAKfmE,EALe,QAURC,GAVQ,iCAWQD,EAASE,OAXjB,cAWbC,EAXa,OAYbrC,EAASqC,EAAarC,OAAOsC,MAAMrC,KAAI,SAACV,GAC5C,MAAO,CACLG,KAAMH,EAAMG,KACZC,OAAQJ,EAAMgD,QAAQ,GAAG7C,KACzBE,MAAOL,EAAMK,MAAMF,KACnBQ,GAAIX,EAAMW,GACVsC,IAAKjD,EAAMiD,QAlBI,kBAqBZxC,GArBY,cAuBb,IAAIyC,MAAM,mBAvBG,0DA0BrB5B,QAAQC,IAAR,MA1BqB,6DA8BnB4B,aArEe,SAqEFC,EAAcC,GAAY,OAAD,yHAC1C/B,QAAQC,IAAI/C,GACP4E,GAAiBC,EAFoB,0CAGjC,GAHiC,aAMrB,gCANqB,kBAQjBb,MAFJ,gCAEsB,CACrCC,QAAS,CACPC,cAAc,UAAD,OAAYlE,MAVS,YAQlCmE,EARkC,QAazBC,GAbyB,kCAcTD,EAASE,OAdA,eAc9BC,EAd8B,OAe9BQ,EAAUR,EAAanC,GAGvB4C,EACJ,sCAAuCD,EAAU,aAnBf,oBAqBGd,MAAMe,EAAmB,CAC5DC,OAAQ,OACRf,QAAS,CACPC,cAAc,UAAD,OAAYlE,IAE3BiF,KAAMC,KAAKC,UAAU,CACnBxD,KAAMiD,MA3BwB,aAqB5BQ,EArB4B,QA8BPhB,GA9BO,kCA+BfgB,EAAuBf,OA/BR,eA+BhCF,EA/BgC,OAgChCrB,QAAQC,IAAIoB,GACNkB,EAAalB,EAAShC,GAEtBmD,EACJ,wCACAD,EACA,gBACAR,EAvC8B,oBAyCCb,MAAMsB,EAAa,CAChDN,OAAQ,OACRf,QAAS,CACPC,cAAc,UAAD,OAAYlE,GACzB,eAAgB,sBA7CU,mBAgDToE,GAhDS,2CAiDrB,GAjDqB,cAmDtB,IAAIM,MAAM,oCAnDY,kEAsD9B5B,QAAQC,IAAR,MAtD8B,mBAuDvB,GAvDuB,kEA2DlCD,QAAQC,IAAR,MA3DkC,mBA4D3B,GA5D2B,sCA+D9B,IAAI2B,MAAM,+BA/DoB,iEAkEtC5B,QAAQC,IAAR,MAlEsC,mBAmE/B,GAnE+B,8EMmB/BwC,E,kDApFb,WAAYrF,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXkC,cAAe,GACfuC,aAAc,GACdlC,eAAgB,IAGlB,EAAKrB,SAAW,EAAKA,SAASf,KAAd,gBAChB,EAAKgB,YAAc,EAAKA,YAAYhB,KAAjB,gBACnB,EAAKkF,mBAAqB,EAAKA,mBAAmBlF,KAAxB,gBAC1B,EAAKqE,aAAe,EAAKA,aAAarE,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAZG,E,qDAeVkB,GACP,KACEf,KAAKN,MAAMuC,eAAe+C,QAAO,SAACC,GAAD,OAAaA,EAAQvD,KAAOX,EAAMW,MAChEwD,OAAS,GAFd,CAME,IAAMC,EAAwBnF,KAAKN,MAAMuC,eACzCkD,EAAsBC,KAAKrE,GAC3Bf,KAAKC,SAAS,CAAEgC,eAAgBkD,IAElC9C,QAAQC,IAAItC,KAAKN,MAAMuC,mB,kCAGblB,GACV,IAAMoE,EAAwBnF,KAAKN,MAAMuC,eACnCoD,EAAQF,EAAsBG,QAAQvE,GACxCsE,GAAS,IACXF,EAAsBI,OAAOF,EAAO,GACpCrF,KAAKC,SAAS,CAAEgC,eAAgBkD,O,yCAGjBjE,GACjBlB,KAAKC,SAAS,CAAEkE,aAAcjD,M,qCAG9B,IAAMkD,EAAY,GAClBpE,KAAKN,MAAMuC,eAAeuD,SAAQ,SAACzE,GACjCqD,EAAUgB,KAAKrE,EAAMiD,QAEnB7B,EAAQ+B,aAAalE,KAAKN,MAAMyE,aAAcC,IAChDpE,KAAKC,SAAS,CACZkE,aAAc,GACdlC,eAAgB,O,sEAITwD,G,uFACWtD,EAAQvC,OAAO6F,G,OAA/BC,E,OACN1F,KAAKC,SAAS,CACZ2B,cAAe8D,I,sIAKjB,OACE,sBAAKrF,UAAU,MAAf,UACE,iEACA,cAAC,EAAD,CAAWD,SAAUJ,KAAKJ,SAC1B,sBAAKS,UAAU,eAAf,UACGL,KAAKN,MAAMkC,eACV,cAAC,EAAD,CACEA,cAAe5B,KAAKN,MAAMkC,cAC1Bd,MAAOd,KAAKY,WAGhB,cAAC,EAAD,CACEoB,MAAOhC,KAAKN,MAAMyE,aAClBlC,eAAgBjC,KAAKN,MAAMuC,eAC3BjB,SAAUhB,KAAKa,YACfkB,aAAc/B,KAAK+E,mBACnB7C,OAAQlC,KAAKkE,yB,GA7EPzD,IAAMC,WCITiF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.09a696ed.chunk.js","sourcesContent":["const clientId = \"1189bc0908be4896ae249e6491292789\";\nconst redirectUri = \"https://mariannefabre.github.io/Jammming-React-App/\";\n\nlet userAccessToken;\n\nexport const Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      console.log(\"here\");\n      return userAccessToken;\n    } else {\n      const finalUrl = window.location.href;\n      const tokenRegex = /access_token=([^&]*)/;\n      const expirationRegex = /expires_in=([^&]*)/;\n      if (\n        finalUrl.match(expirationRegex) != null &&\n        finalUrl.match(tokenRegex) != null\n      ) {\n        let expirationTime = finalUrl.match(expirationRegex)[1];\n        userAccessToken = finalUrl.match(tokenRegex)[1];\n        window.setTimeout(() => {\n          userAccessToken = \"\";\n        }, expirationTime * 1000);\n        window.history.pushState(\"Access Token\", null, \"/\");\n        console.log(\"here\");\n      } else if (finalUrl.match(tokenRegex) === null) {\n        const url = \"https://accounts.spotify.com/authorize?\";\n        const responseType = \"token\";\n        const scope = \"playlist-modify-public\";\n        const redirectUrl =\n          url +\n          \"client_id=\" +\n          clientId +\n          (scope ? \"&scope=\" + encodeURIComponent(scope) : \"\") +\n          \"&response_type=\" +\n          responseType +\n          \"&redirect_uri=\" +\n          redirectUri;\n        window.location.href = redirectUrl;\n        console.log(\"HERE\");\n      }\n    }\n  },\n\n  async search(searchTerm) {\n    this.getAccessToken();\n    const urlToFetch =\n      \"https://api.spotify.com/v1/search?type=track&q=\" + searchTerm;\n    try {\n      const response = await fetch(urlToFetch, {\n        headers: {\n          Authorization: `Bearer ${userAccessToken}`,\n        },\n      });\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        const tracks = jsonResponse.tracks.items.map((track) => {\n          return {\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            id: track.id,\n            uri: track.uri,\n          };\n        });\n        return tracks;\n      } else {\n        throw new Error(\"Request failed!\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  },\n\n  async savePlaylist(playlistName, trackURIs) {\n    console.log(userAccessToken);\n    if (!playlistName || !trackURIs) {\n      return false;\n    } else {\n      // Get current user's profile\n      const urlToFetch = \"https://api.spotify.com/v1/me\";\n      try {\n        let response = await fetch(urlToFetch, {\n          headers: {\n            Authorization: `Bearer ${userAccessToken}`,\n          },\n        });\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          const user_id = jsonResponse.id;\n\n          // Create playlist in user's account\n          const createPlaylistUrl =\n            \"\thttps://api.spotify.com/v1/users/\" + user_id + \"/playlists\";\n          try {\n            const createPlaylistResponse = await fetch(createPlaylistUrl, {\n              method: \"post\",\n              headers: {\n                Authorization: `Bearer ${userAccessToken}`,\n              },\n              body: JSON.stringify({\n                name: playlistName,\n              }),\n            });\n            if (createPlaylistResponse.ok) {\n              response = await createPlaylistResponse.json();\n              console.log(response);\n              const playlistID = response.id;\n              // Add items to playlist\n              const addItemsUrl =\n                \"https://api.spotify.com/v1/playlists/\" +\n                playlistID +\n                \"/tracks?uris=\" +\n                trackURIs;\n              try {\n                const addItemsResponse = await fetch(addItemsUrl, {\n                  method: \"post\",\n                  headers: {\n                    Authorization: `Bearer ${userAccessToken}`,\n                    \"Content-type\": \"application/json\",\n                  },\n                });\n                if (addItemsResponse.ok) {\n                  return true;\n                } else {\n                  throw new Error(\"Could not add songs to playlist.\");\n                }\n              } catch (e) {\n                console.log(e);\n                return false;\n              }\n            }\n          } catch (e) {\n            console.log(e);\n            return false;\n          }\n        } else {\n          throw new Error(\"Could not get user profile.\");\n        }\n      } catch (e) {\n        console.log(e);\n        return false;\n      }\n    }\n  },\n};\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nexport class SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchTerm: \"\",\n    };\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  handleTermChange(e) {\n    \n    this.setState({\n      searchTerm: e.target.value\n    })\n  }\n\n  search() {\n    if(this.state.searchTerm){\n      this.props.onSearch(this.state.searchTerm);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          value={this.state.searchTerm}\n          placeholder=\"Enter a song, artist or album\"\n          onChange={this.handleTermChange}\n        />\n        <button className=\"SearchButton\" onClick={this.search}>\n          SEARCH\n        </button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./Track.css\";\n\nexport class Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n  renderAction() {\n    if (this.props.isRemoval === \"true\") {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist} | {this.props.track.album}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Track } from \"../Track/Track\";\nimport \"./Tracklist.css\";\n\nexport class Tracklist extends React.Component {\n  render() {\n    const trackList = this.props.tracks.map((track) => {\n      return (\n        <Track\n          key={track.id}\n          track={track}\n          onAdd={this.props.onAdd}\n          isRemoval={this.props.isRemoval}\n          onRemove={this.props.onRemove}\n        />\n      );\n    });\n\n    return <div className=\"TrackList\">{trackList}</div>;\n  }\n}\n","import React from \"react\";\nimport \"./SearchResults.css\";\nimport { Tracklist } from \"../Tracklist/Tracklist\";\n\nexport class SearchResults extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <Tracklist\n          tracks={this.props.searchResults}\n          isRemoval=\"false\"\n          onAdd={this.props.onAdd}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Tracklist } from \"../Tracklist/Tracklist\";\nimport \"./Playlist.css\";\n\nexport class Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n  handleNameChange(e) {\n    this.props.onNameChange(e.target.value);\n  }\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input\n          placeholder=\"Add playlist name\"\n          onChange={this.handleNameChange}\n          value={this.props.title}\n        />\n        <Tracklist\n          tracks={this.props.playlistTracks}\n          isRemoval=\"true\"\n          onRemove={this.props.onRemove}\n        />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n","import \"./App.css\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/Playlist\";\nimport React from \"react\";\n\nimport { Spotify } from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"\",\n      playlistTracks: [],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (\n      this.state.playlistTracks.filter((element) => element.id === track.id)\n        .length > 0\n    ) {\n      return;\n    } else {\n      const updatedPlaylistTracks = this.state.playlistTracks;\n      updatedPlaylistTracks.push(track);\n      this.setState({ playlistTracks: updatedPlaylistTracks });\n    }\n    console.log(this.state.playlistTracks);\n  }\n\n  removeTrack(track) {\n    const updatedPlaylistTracks = this.state.playlistTracks;\n    const index = updatedPlaylistTracks.indexOf(track);\n    if (index > -1) {\n      updatedPlaylistTracks.splice(index, 1);\n      this.setState({ playlistTracks: updatedPlaylistTracks });\n    }\n  }\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n  savePlaylist() {\n    const trackURIs = [];\n    this.state.playlistTracks.forEach((track) => {\n      trackURIs.push(track.uri);\n    });\n    if (Spotify.savePlaylist(this.state.playlistName, trackURIs)) {\n      this.setState({\n        playlistName: \"\",\n        playlistTracks: [],\n      });\n    }\n  }\n  async search(term) {\n    const results = await Spotify.search(term);\n    this.setState({\n      searchResults: results,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Create new playlists on Spotify</h1>\n        <SearchBar onSearch={this.search} />\n        <div className=\"App-playlist\">\n          {this.state.searchResults && (\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n          )}\n          <Playlist\n            title={this.state.playlistName}\n            playlistTracks={this.state.playlistTracks}\n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}